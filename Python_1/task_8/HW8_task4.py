__author__ = "Василенко Сергей Александрович"


# 4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников.
# Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определите параметры, общие для приведённых типов.
# В классах-наследниках реализуйте параметры, уникальные для каждого типа оргтехники.

# 5. Продолжить работу над первым заданием. Разработайте методы, которые отвечают за приём оргтехники на склад и передачу в определённое подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру (например, словарь).

# 6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.

class Org_store:
    stor_org = {}

    def __init__(self, name , sn):
        self.name = name
        self.sn = sn
        self.stor = {name: sn}

    def new_org(self):
        try:
            #name = input("Введите название: ")
            #sn = input("Введите серийный номер: ")
            self.stor = {self.name : self.sn}
            print(self.stor)
            Org_store.stor_org[self.name] = [self.sn]
            print(Org_store.stor_org)
#            if self.name not in Org_store.stor_org.keys():
#               Org_store.stor_org[self.name] = [self.sn]
        except ValueError:
            print("Недопустимое значение!")



class Print(Org_store):
    pass


class Scan(Org_store):
    pass


class Xerox(Org_store):
    pass

p = Print('Hp', "CP0001")
s = Scan('Canon', "CS0001")
x = Xerox('Xerox', "CX0001")
p.new_org()
s.new_org()
x.new_org()

